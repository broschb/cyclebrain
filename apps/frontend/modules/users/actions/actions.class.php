<?php
// auto-generated by sfPropelCrud
// date: 2008/12/07 14:48:57
?>
<?php

/**
 * users actions.
 *
 * @package    bike
 * @subpackage users
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class usersActions extends sfActions
{

public function executeLogin()
{
  if ($this->getRequest()->getMethod() != sfRequest::POST)
  {
    // display the form
    $this->getRequest()->setAttribute('referer', $this->getRequest()->getReferer());
  }
  else
  {
    // handle the form submission
    $nickname = $this->getRequestParameter('nickname');
    $password = $this->getRequestParameter('password');
    //$password = $this->getContext()->getRequest()->getParameter($password_param);


    $c = new Criteria();
    $c->add(UsersPeer::USERNAME, $nickname);
    $user = UsersPeer::doSelectOne($c);

    // nickname exists?
    if ($user)
    {
      // password is OK?
      if (sha1($user->getSalt().$password) == $user->getPassword() && $user->getActive()=='Y')
      {
        $this->getUser()->setAuthenticated(true);
        $this->getUser()->addCredential('subscriber');

        $this->getUser()->setAttribute('subscriber_id', $user->getUserId(), 'subscriber');
        $this->getUser()->setAttribute('nickname', $user->getUsername(), 'subscriber');
        //set mileage preference
        $this->setUserAttribute($user->getUserId());

        // redirect to last page
        return $this->redirect($this->getRequestParameter('referer', '@homepage'));
      }
    }
  }
}

private function setUserAttribute($userId){
     $userPref = UserProfilePeer::retrieveByPK($userId);
     if($userPref){
        $this->getUser()->setAttribute('mileage',$userPref->getMiles(),'subscriber');
     }else{
         //create a user pref
         $profile = new UserProfile();
         $profile->setUserId($userId);
         $profile->setMiles(1);
         $profile->save();
         $this->getUser()->setAttribute('mileage',$profile->getMiles(),'subscriber');
     }
     
}

public function executeAuthenticate(){
    // handle the form submission
    $nickname = $this->getRequestParameter('nickname');
    $password = $this->getRequestParameter('password');
    //$password = $this->getContext()->getRequest()->getParameter($password_param);

    $c = new Criteria();
    $c->add(UsersPeer::USERNAME, $nickname);
    $user = UsersPeer::doSelectOne($c);
    $this->hide=false;
    // nickname exists?
    if ($user)
    {
        if($user->getActive()=='Y'){
            // password is OK?
            if (sha1($user->getSalt().$password) == $user->getPassword())
            {
                sfContext::getInstance()->getLogger()->info('@@@@@@@@@@AUTHOK '.$nickname);
                $this->getUser()->setAuthenticated(true);
                $this->getUser()->addCredential('subscriber');

                $this->getUser()->setAttribute('subscriber_id', $user->getUserId(), 'subscriber');
                $this->getUser()->setAttribute('nickname', $user->getUsername(), 'subscriber');
                 //set mileage preference
                 $this->setUserAttribute($user->getUserId());
                $this->hide=true;
                $this->errors = '';
                // redirect to last page
                //return $this->redirect($this->getRequestParameter('referer', '@homepage'));
            }else{
                $this->errors = 'Invalid Password';
            }
        }else{
            $this->errors = 'Please activate account first!';
        }
    }else{
        $this->errors = 'Invalid Login Credentials';
    }
}

  public function executeAdd()
  {
    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {

          $user = new Users();
          $user->setFname($this->getRequestParameter('fname'));
          $user->setLname($this->getRequestParameter('lname'));
          $user->setEmail($this->getRequestParameter('email'));
          $user->setUsername($this->getRequestParameter('username'));
          $user->saltPassword($this->getRequestParameter('password'));

          //send email for account activation
          $confCode = sha1($user->getSalt().$user->getUsername());
          $user->save();
          $this->sendMail($user->getUsername(),$confCode,$user->getUserId(),$user->getEmail());
                
          return $this->redirect($this->getRequestParameter('referer', '@homepage'));
    }
  }

  public function executeProfile(){
       $userId = sfContext::getInstance()->getUser()->getAttribute('subscriber_id',null,'subscriber');
         if($userId)
         {
             $c = new Criteria();
             $c->add(UsersPeer::USER_ID,$userId);
             $this->user=UsersPeer::doSelect($c);
         }
  }

  public function executeChangePassword(){
      $userId = sfContext::getInstance()->getUser()->getAttribute('subscriber_id',null,'subscriber');
      $this->errors=null;
          $oldPass = $this->getRequestParameter('currentPass');
          $newPass = $this->getRequestParameter('currentPass');
          $vPass = $this->getRequestParameter('currentPass');
          if($userId && $oldPass && $newPass && $vPass)
          {
              $c = new Criteria();
              $c->add(UsersPeer::USER_ID, $userId);
              $user = UsersPeer::doSelectOne($c);
              if($user){
                  //verify old password
                  if (sha1($user->getSalt().$oldPass) == $user->getPassword())
                  {
                      if($newPass==$vPass){
                      $user->saltPassword($newPass);
                      $user->save();
                      }else{
                           $this->errors='New Passwords Do Not Match';
                      }
                  }else{
                       $this->errors='Old Password Is Invalid';
                  }
              }
          }
  }

  public function executeChangePasswordAjax(){
       $userId = sfContext::getInstance()->getUser()->getAttribute('subscriber_id',null,'subscriber');
      $this->errors='';
      $this->hide=false;
          $oldPass = $this->getRequestParameter('currentPass');
          $newPass = $this->getRequestParameter('password');
          $vPass = $this->getRequestParameter('vpassword');
          if($userId && $oldPass && $newPass && $vPass)
          {
              $c = new Criteria();
              $c->add(UsersPeer::USER_ID, $userId);
              $user = UsersPeer::doSelectOne($c);
              if($user){
                  //verify old password
                  if (sha1($user->getSalt().$oldPass) == $user->getPassword())
                  {
                      if($newPass==$vPass){
                      $user->saltPassword($newPass);
                      $user->save();
                      $this->hide=true;
                      }else{
                           $this->errors='New Passwords Do Not Match';
                      }
                  }else{
                       $this->errors='Old Password Is Invalid';
                  }
              }
          }
  }

  public function executeNewUser(){
      $this->hide=false;
       
       //check to see if exists
    $c = new Criteria();
    $c->add(UsersPeer::USERNAME, $this->getRequestParameter('username'));
    $userExist = UsersPeer::doSelectOne($c);
    if($userExist){
        $this->errors = 'Username already exists, please select another username.';
    }else{
        //check passwords
        $pass = $this->getRequestParameter('password');
        $vpass = $this->getRequestParameter('vpassword');
        if($pass==$vpass){
       $user = new Users();
          $user->setFname($this->getRequestParameter('fname'));
          $user->setLname($this->getRequestParameter('lname'));
          $user->setEmail($this->getRequestParameter('email'));
          $user->setUsername($this->getRequestParameter('username'));
          $user->saltPassword($this->getRequestParameter('password'));

          //send email for account activation
          $confCode = sha1($user->getSalt().$user->getUsername());
          $user->save();
          $this->sendMail($user->getUsername(),$confCode,$user->getUserId(),$user->getEmail());
          $this->errors = '';
          $this->hide=true;
        }else{
            $this->errors = 'Passwords do not match, please re-enter';
        }
    }
  }

  public function executeForgot(){
      if ($this->getRequest()->getMethod() != sfRequest::POST)
  {
      $this->emailSent=false;
    // display the form
    $this->getRequest()->setAttribute('referer', $this->getRequest()->getReferer());
  }
  else
  {
    // handle the form submission
    $nickname = $this->getRequestParameter('nickname');


    $c = new Criteria();
    $c->add(UsersPeer::USERNAME, $nickname);
    $user = UsersPeer::doSelectOne($c);

    // nickname exists?
    if ($user)
    {
         $password = substr(md5(rand(100000, 999999)), 0, 6);
         $user->saltPassword($password);
         $user->save();
         $this->emailSent=true;
         $this->sendPasswordMail($user->getUsername(),$user->getEmail(),$password);
    }else
        $this->emailSent=false;
        
    $this->getRequest()->setAttribute('referer', $this->getRequest()->getReferer());
  }
  }

  public function sendPasswordMail($user, $email,$newPassword){
      try
      {
          // Create the mailer and message objects
         /* $connection = new Swift_Connection_SMTP('smtp.gmail.com', 465, Swift_Connection_SMTP::ENC_SSL);
          $connection->setUsername('cyclebrain@gmail.com');
          $connection->setPassword('bRb061626');

          $mailer = new Swift($connection);
          $message = new Swift_Message('CycleBrain Password');

          // Render message parts
          $mailContext = array('name' => $user,'pass' => $newPassword);
          $message->attach(new Swift_Message_Part($this->getPartial('users/mailHtmlPasswordReset', $mailContext), 'text/html'));
          $message->attach(new Swift_Message_Part($this->getPartial('users/mailTextPasswordReset', $mailContext), 'text/plain'));

          // Send
          $mailer->send($message, $email, 'cyclebrain@gmail.com');
          $mailer->disconnect();*/
          $body = $user.' Your password has been reset.  Below is your new password, please reset
your password after loggin in.\n '.$newPassword;
           $email= new CycleBrainEmail();
           $email->sendEmail($email, 'admin@cyclebrain.com', 'CycleBrain Password', $body);
      }
      catch (Exception $e)
      {
    //      $mailer->disconnect();
      }
  }

  public function sendMail($user, $link, $userId,$email){
      try
      {
          // Create the mailer and message objects
        /*  $connection = new Swift_Connection_SMTP('smtp.gmail.com', 465, Swift_Connection_SMTP::ENC_SSL);
          $connection->setUsername('cyclebrain@gmail.com');
          $connection->setPassword('bRb061626');

          $mailer = new Swift($connection);
          $message = new Swift_Message('Welcome to CycleBrain');*/
          $fullLink = 'http://test.brandon.com/frontend_dev.php/confirmation?uid='.$userId.'&conf='.$link;
          $email= new CycleBrainEmail();
          $subject = 'Welcome to Cyclebrain';
          $body = $userId.' Please follow the link below to activate your account\n'.$fullLink;
          $email->sendEmail($email, 'admin@cyclebrain.com', $subject, $body);
          // Render message parts
         /* $mailContext = array('name' => $user,'link' => $fullLink);
          $message->attach(new Swift_Message_Part($this->getPartial('users/mailHtmlBody', $mailContext), 'text/html'));
          $message->attach(new Swift_Message_Part($this->getPartial('users/mailTextBody', $mailContext), 'text/plain'));

          // Send
          $mailer->send($message, $email, 'cyclebrain@gmail.com');
          $mailer->disconnect();*/
      }
      catch (Exception $e)
      {
          //$mailer->disconnect();
      }
  }

 /* public function validateAdd()
  {
    if($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $captcha = $this->getRequestParameter('captcha');

      $session_captcha = $this->getUser()->getAttribute('captcha');

      if($captcha != $session_captcha)
      {
        $this->getRequest()->setError('captcha', 'The code you entered did not match the one provided, please try again.');
        return false;
      }
    }
    return true;
  }


  public function executeGetImage()
  {
    $this->getResponse()->setContentType('image/jpeg');
    $captcha = new sfCaptcha();
    $captcha->generateImage();
    $this->getUser()->setAttribute('captcha', $captcha->securityCode);
    imagejpeg($captcha->img);
    imageDestroy($captcha->img);
    return sfView::NONE;
  }*/


public function executeLogout()
{
  $this->getUser()->setAuthenticated(false);
  $this->getUser()->clearCredentials();

  $this->getUser()->getAttributeHolder()->removeNamespace('subscriber');

  $this->redirect('@homepage');
}


/* public function executeEdit($request)
  {
      	 $userId = sfContext::getInstance()->getUser()->getAttribute('subscriber_id',null,'subscriber');
      if($userId) $user = UsersPeer::retrieveByPK($userId);
       if($user) $profile = UserProfilePeer::retrieveByPK($user->getUserId());
  	$this->forward404Unless($user);
    if(!$profile)
        $profile = new UserProfile();
  	$this->forward404Unless($user);

  	$this->errors = array();
  	if($request->isMethod('post'))
  	{
  		// pre-populate country, state and city in order to filter select boxes
  		$data = $request->getParameter('user');
  		$profile->setCountry(@$data['country_id']);
  		$profile->setState(@$data['state_id']);
  		$profile->setCity(@$data['city_id']);

  			if($this->form->isValid())
  			{
  				$this->form->save();
  				return $this->redirect('users/profile');
  			}

		  	// get errors into array
		  	foreach($this->form->getFormFieldSchema()->getError() as $e)
		  		$this->errors[] = $e;
  	}

  }*/
 public function executeEdit($request)
  {
      $userId = sfContext::getInstance()->getUser()->getAttribute('subscriber_id',null,'subscriber');
      $this->miles=true;
      $this->kilo=false;
      if($userId)
        $this->user = UsersPeer::retrieveByPK($userId);
        $this->forward404Unless($this->user);
        if($this->user){
         $profile = UserProfilePeer::retrieveByPK($this->user->getUserId());
         if($profile->getMiles()==1){
             $this->miles=true;
             $this->kilo=false;
         }else{
             $this->miles=false;
             $this->kilo=true;
         }
       }
  	
    if(!$profile){
        $profile = new UserProfile();
         $profile->setUserId( $this->user->getUserId());
         $profile->setMiles(1);
    }

  	 $this->user->setUserProfile($profile);
  	if($request->isMethod('post'))
  	{
        $fname = $this->getRequestParameter('fname');
        $lname = $this->getRequestParameter('lname');
        $email = $this->getRequestParameter('email');
        $bday = join("/",$this->getRequestParameter('bday'));
        $weight = $this->getRequestParameter('weight');
        $height = $this->getRequestParameter('height');
        $zip = $this->getRequestParameter('zip');
        $units = $this->getRequestParameter('units');
        //make sure have profile
        if(!$this->user->getUserProfile()){
             $profile = UserProfilePeer::retrieveByPK($user->getUserId());
             if($profile)
             $this->user->setUserProfile($profile);
             else{
                 $profile = new UserProfile();
                 $profile->setUserId($user->getUserId());
                 $profile->setMiles(1);
                 $profile->save();
                 $this->user->setUserProfile($profile);
             }
         }

  		// pre-populate country, state and city in order to filter select boxes
        $profile = $this->user->getUserProfile();
        //set up profile data
        $profile->setBirthdate($bday);
        $profile->setWeight($weight);
        $profile->setHeight($height);
        $profile->setZip($zip);
       
        if($units && count($units)>0){
            $u=$units[0];
        if($u == "kilo"){
            $profile->setMiles(0);
        }
        else{
            $profile->setMiles(1);
        }
        }else{
            $profile->setMiles(1);
        }

        //set up user
         $this->user->setFname($fname);
         $this->user->setLname($lname);
         $this->user->setEmail($email);
        
  		//$data = $request->getParameter('user');
        //$data = $this->getRequestParameter('user');
  		//$profile->setCountry($data['country_id']);
  		//$profile->setState($data['state_id']);
  		//$profile->setCity($data['city_id']);

  		// check validity
     //   if(!$profile->getCity() || ($profile->getCpCities()->getStateId() != $profile->getState())) $profile->setCity(0);
     //   if(!$profile->getState() || ($profile->getCpStates()->getCountryId() != $profile->getCountry())) $profile->setState(0);
  	//	if(!$profile->getCountry()) $profile->setCountry(0);
         $this->user->setUserProfile($profile);
  	//	$this->form = new UserProfileForm($profile);
  	//	$this->form->bind($request->getParameter('user'));
  		
                 $this->user->save();
                $profile->save();
                 //set mileage preference
                $this->getUser()->setAttribute('mileage',$profile->getMiles(),'subscriber');
  				return $this->redirect('users/profile');
  			
  	}
  }

public function executeGetStates(){
    $countryId = $this->getRequestParameter('id');
    if($countryId){
        $this->states = CpStatesPeer::getAllStatesByCountry($countryId);
    }else{
        $this->states = null;
    }
}

public function executeGetCities(){
    $stateId = $this->getRequestParameter('id');
    if($stateId){
        $this->cities = CpCitiesPeer::getAllCitiesByState($stateId);
    }else{
        $this->cities = null;
    }
}
 
}
